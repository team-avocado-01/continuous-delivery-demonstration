version: 2.1

orbs:
  slack: circleci/slack@3.2.0

jobs:
  test-master:
    docker:
      - image: circleci/python:3.7.3
    working_directory: ~/repo
    steps:

      - slack/notify:
          message: "Testing final 'Master' branch..."
          color: "#FFA500"

      - checkout

      - restore_cache:
          key: dependencies-{{ .Branch }}-{{ checksum "Pipfile.lock" }}

      - run:
          name: Install Dependencies
          command: |
            sudo pip install pipenv
            pipenv install

      - save_cache:
          key: dependencies-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - "~/.local/share/virtualenvs/"

      - run:
          name: Run Logic Tests (pytest)
          command: |
            mkdir test-reports
            pipenv run coverage run -m  --omit=/home/circleci/.local/* \
                                            pytest --junitxml=test-reports/junit.xml
            pipenv run coverage report
            pipenv run coverage html
            pipenv run coverage xml -o test-reports/cover.xml

      - run:
          name: Check Codestyle Guidelines (pycodestyle)
          command: |
            pipenv run pycodestyle --ignore=E902 --max-line-length=100 *.py

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports

      - slack/status

  test-feature:
    docker:
      - image: circleci/python:3.7.3
    working_directory: ~/repo
    steps:

      - slack/notify:
          message: "Testing prospective feature..."
          color: "#FFA500"

      - checkout

      - restore_cache:
          key: dependencies-{{ .Branch }}-{{ checksum "Pipfile.lock" }}

      - run:
          name: Install Dependencies
          command: |
            sudo pip install pipenv
            pipenv install

      - save_cache:
          key: dependencies-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - "~/.local/share/virtualenvs/"

      - run:
          name: Run Logic Tests (pytest)
          command: | # testBranch should be identical to the remote master, with feature/* merged
            git checkout -b testBranch origin/master
            git merge $CIRCLE_BRANCH
            mkdir test-reports
            pipenv run pytest --junitxml=test-reports/junit.xml

      - run:
          name: Check Codestyle Guidelines (pycodestyle)
          command: |
            pipenv run pycodestyle --ignore=E902 --max-line-length=100 *.py

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports

      - slack/status

  deploy:
    docker:
      - image: circleci/python:3.7.3
    working_directory: ~/repo
    steps:

      - slack/notify:
          message: "Attempting to deploy new feature..."
          color: "#FFA500"

      - checkout

      - add_ssh_keys:
          fingerprints: # Key refers to the team-avocado-01 github account
            - "fa:c7:b0:a0:8b:c0:6e:eb:ae:21:6b:27:c9:d2:91:47"

      - run:
          name: Merge Feature Branch onto Master
          command: |
            git checkout -b testBranch origin/master
            git merge $CIRCLE_BRANCH
            git push origin master

      - run:  #creating dummy files to return build artifacts
          name: Creating Dummy Artifacts
          command: |
            echo "my artifact file" > /tmp/artifact-1;
            mkdir /tmp/artifacts;
            echo "my artifact files in a dir" > /tmp/artifacts/artifact-2;

      - store_artifacts:
          path: /tmp/artifact-1
          destination: artifact-file

      - store_artifacts:
          path: /tmp/artifacts

      - slack/status

workflows:
  version: 2.1
  test-deploy:
    jobs:
      - test-master:    # Checks that the master branch is currently not broken
          filters:
            branches:
              only: master
      - test-feature:   # Checks if a feature will break master, when merged into it
          filters:
            branches:
              only: /feature/.*/
      - deploy:         # We only deploy (to master) if we are testing a feature branch and pass
          requires:
          - test-feature
          filters:
            branches:
              only: /feature/.*/
