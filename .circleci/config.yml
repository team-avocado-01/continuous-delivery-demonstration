version: 2.1

orbs:
  slack: circleci/slack@3.2.0

jobs:
  test-master:
    docker:
      - image: circleci/python:3.7.3
    working_directory: ~/repo
    steps:

      - checkout

      - slack/notify:
          message: "Testing Master Branch"
          color: "#FFA500"

      - restore_cache:
          key: dependencies-{{ .Branch }}-{{ checksum "Pipfile.lock" }}

      - run:
          name: Install Dependencies
          command: |
            sudo pip install pipenv
            pipenv install

      - run:
          name: Run Logic Tests (pytest)
          command: |
            mkdir test-reports
            pipenv run coverage run -m  --omit=/home/circleci/.local/* \
                                            pytest --junitxml=test-reports/junit.xml
            pipenv run coverage report
            pipenv run coverage html
            pipenv run coverage xml -o test-reports/cover.xml

      - run:
          name: Check Codestyle Guidelines (pycodestyle)
          command: |
            pipenv run pycodestyle --ignore=E902 --max-line-length=100 *.py

      - save_cache:
          key: dependencies-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - "~/.local/share/virtualenvs/"

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports

      - slack/status

  test-feature:
    docker:
      - image: circleci/python:3.7.3
    working_directory: ~/repo
    steps:

      - slack/notify:
          message: "Testing prospective feature..."
          color: "#FFA500"

      - checkout

      - restore_cache:
          key: dependencies-{{ .Branch }}-{{ checksum "Pipfile.lock" }}

      - run:
          name: Install Dependencies
          command: |
            sudo pip install pipenv
            pipenv install '-e .'

      - save_cache:
          key: dependencies-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - "~/.local/share/virtualenvs/"

      - run:
          name: Run Logic Tests (pytest)
          post: |
            if [[ -n "${CIRCLE_PR_NUMBER}" ]]
          then
            # Update PR refs for testing.
            FETCH_REFS="+${CIRCLE_PR_BASE_BRANCH}:${CIRCLE_PR_BASE_BRANCH}"
            FETCH_REFS="${FETCH_REFS} +refs/pull/${CIRCLE_PR_NUMBER}/head:pr/${CIRCLE_PR_NUMBER}/head"
            FETCH_REFS="${FETCH_REFS} +refs/pull/${CIRCLE_PR_NUMBER}/merge:pr/${CIRCLE_PR_NUMBER}/merge"

            # Retrieve the refs
            git fetch -u origin ${FETCH_REFS}

            # Checkout PR merge ref.
            git checkout -qf "pr/${CIRCLE_PR_NUMBER}/merge"

            # Test for merge conflicts.
            git branch --merged | grep ${CIRCLE_PR_BASE_BRANCH} > /dev/null
            git branch --merged | grep "pr/${CIRCLE_PR_NUMBER}/head" > /dev/null
        fi
          command: |
            mkdir test-reports
            ls
            pipenv run pytest --junitxml=test-reports/junit.xml

      - run:
          name: Check Codestyle Guidelines (pycodestyle)
          command: |
            pipenv run pycodestyle --ignore=E902 --max-line-length=100 *.py

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports

      - slack/status

workflows:
  version: 2.1
  test-deploy:
    jobs:
      - test-master:    # Checks that the master branch is currently not broken
          filters:
            branches:
              only: master
      - test-feature:   # Checks if a feature will break master, when merged into it
          filters:
            branches:
              only: /feature/.*/
